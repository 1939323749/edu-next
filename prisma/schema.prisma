// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.VarChar(255)
  content     String?
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  description String?
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
  account Account?
}

model Account {
  id       Int    @id @default(autoincrement())
  account  String @unique @db.VarChar(255)
  password String
  userId   Int    @unique @default(0)
  user     User   @relation(fields: [userId], references: [id])
}

model Student {
  id             Int       @id @default(autoincrement())
  name           String
  sex            String
  birthday       DateTime
  enrolled_time  DateTime
  graduated_time DateTime?
  email          String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  courses        Course[]
  class          Class     @relation(fields: [classId], references: [id])
  classId        Int       @default(0)
  Score          Score[]
  major          Major     @relation(fields: [majorId], references: [id])
  majorId        Int       @default(0)
}

model Course {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  credit       Float       @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  students     Student[]
  teachers     Teacher[]
  classes      Class[]
  time_blocks  TimeBlock[]
  exams        Exam[]
  department   Department  @relation(fields: [departmentId], references: [id])
  departmentId Int         @default(0)
}

model Teacher {
  id        Int      @id @default(autoincrement())
  sex       String
  name      String
  title     String?
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
  department Department @relation(fields: [departmentId], references: [id])
  departmentId Int @default(0)
}

model Class {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courses     Course[]
  students    Student[]
}

model TimeBlock {
  id          Int        @id @default(autoincrement())
  week_start  Int
  week_end    Int
  day_of_week Int        @default(1)
  start       Int
  end         Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  course      Course[]
  location    Location[]
}

model Location {
  id        Int         @id @default(autoincrement())
  name      String
  address   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  timeBlock TimeBlock[]
  exam      Exam[]
}

model Exam {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  location    Location[]
  start       DateTime
  end         DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course[]
  Score       Score[]
}

model Score {
  id        Int      @id @default(autoincrement())
  score     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  exam      Exam     @relation(fields: [examId], references: [id])
  examId    Int
}

model Major {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  students    Student[]
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  majors      Major[]
  courses     Course[]
  teachers    Teacher[]
}
